version: "3"

services:
  common-zipkin:
    image: openzipkin/zipkin:latest
    container_name: common-zipkin
    restart: always
    ports:
      - 9411:9411

  common-redis:
    image: bitnami/redis:latest
    container_name: common-redis
    restart: always
    environment:
      ALLOW_EMPTY_PASSWORD: "yes"
    ports:
      - 6379:6379

  # common-google-pubsub:
  #   image: adhawk/google-pubsub-emulator
  #   container_name: common-google-pubsub
  #   restart: always
  #   ports:
  #     - 8085:8085

  common-mongodb:
    image: mongo:latest
    container_name: common-mongodb
    restart: always
    # replica set needed to enable transaction feature in mongodb
    entrypoint: ["/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0"]
    ports:
      - 27017:27017
    volumes:
      - common_mongo_data:/data/db
      - common_mongo_config:/data/configdb

  # common-mongodb2:
  #   image: mongo:latest
  #   container_name: common-mongodb2
  #   restart: always
  #   entrypoint: ["/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0"]

  common-mongoclient: # this used for activating replica set
    image: mongo:latest
    container_name: common-mongoclient
    depends_on:
      - common-mongodb
      # - common-mongodb2
    volumes:
      - ./scripts:/scripts
    entrypoint: ["bash", "/scripts/mongodb/initiate_replica.sh"]

  # common-mongodb:
  #   image: bitnami/mongodb:4.2.9
  #   container_name: common-mongodb
  #   environment:
  #     ALLOW_EMPTY_PASSWORD: "yes"
  #     MONGODB_REPLICA_SET_MODE: primary # mongodb transaction should need in replica mode
  #   ports:
  #     - 27017:27017
  #   volumes:
  #     - mongodb_master_data:/bitnami

#   common-influxdb:
#     image: influxdb:latest
#     restart: always
#     ports:
#       - 8086:8086
#     volumes:
#       - influxdb-storage:/var/lib/influxdb
#     environment:
#       INFLUXDB_DB: db0
#       INFLUXDB_ADMIN_USER: ${INFLUXDB_USER:-admin}
#       INFLUXDB_ADMIN_PASSWORD: ${INFLUXDB_PASS:-123456}

#   common-grafana:
#     image: grafana/grafana:latest
#     restart: always
#     ports:
#       - 8001:3000
#     volumes:
#       - grafana-storage:/var/lib/grafana
#       - ./grafana/provisioning/:/etc/grafana/provisioning
#     depends_on:
#       - common-influxdb
#     environment:
#       GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
#       GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASS:-123456}

  common-mysql-master:
    image: docker.io/bitnami/mysql:8.0
    container_name: common-mysql-master
    # command: --default-authentication-plugin=mysql_native_password
    ports:
      - 3306:3306
    volumes:
      - 'common_mysql_master_data:/bitnami/mysql/data'
    environment:
      - MYSQL_REPLICATION_MODE=master
      - MYSQL_REPLICATION_USER=repl_user
      # ALLOW_EMPTY_PASSWORD is recommended only for development.
      - ALLOW_EMPTY_PASSWORD=yes
      - MYSQL_ROOT_PASSWORD=my_root_password
    healthcheck:
      test: ['CMD', '/opt/bitnami/scripts/mysql/healthcheck.sh']
      interval: 15s
      timeout: 5s
      retries: 6

  common-mysql-slave:
    image: docker.io/bitnami/mysql:8.0
    container_name: common-mysql-slave
    # command: --default-authentication-plugin=mysql_native_password
    ports:
      - 3307:3306
    depends_on:
      - common-mysql-master
    environment:
      - MYSQL_REPLICATION_MODE=slave
      - MYSQL_REPLICATION_USER=repl_user
      - MYSQL_MASTER_HOST=mysql-master
      - MYSQL_MASTER_PORT_NUMBER=3306
      - MYSQL_MASTER_ROOT_PASSWORD=my_root_password
      # ALLOW_EMPTY_PASSWORD is recommended only for development.
      - ALLOW_EMPTY_PASSWORD=yes
    healthcheck:
      test: ['CMD', '/opt/bitnami/scripts/mysql/healthcheck.sh']
      interval: 15s
      timeout: 5s
      retries: 6

  common-phpmyadmin:
    image: docker.io/bitnami/phpmyadmin:5
    container_name: common-phpmyadmin
    restart: always
    environment:
      DATABASE_HOST: common-mysql-master
    ports:
      - '3301:8080'
      # - '443:8443'

  # common-mysql:
  #   image: mysql:5.7.29
  #   container_name: common-mysql
  #   restart: always
  #   command: --sql_mode="STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION" # to set sql mode like staging sql mode
  #   environment:
  #     MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
  #   ports:
  #     - 3306:3306
  #   volumes:
  #     - ./storage/mysql:/var/lib/mysql

  # common-pma:
  #   image: phpmyadmin/phpmyadmin
  #   container_name: common-pma
  #   restart: always
  #   environment:
  #     PMA_HOST: common-mysql
  #     PMA_PORT: 3306
  #   ports:
  #     - 3301:80

  # zookeeper:
  #   image: ${CONFLUENT_REPOSITORY:-confluentinc}/cp-zookeeper:${CONFLUENT_TAG:-5.4.1}
  #   hostname: zookeeper
  #   container_name: zookeeper
  #   ports:
  #     - "2181:2181"
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000

  # broker:
  #   image: ${CONFLUENT_REPOSITORY:-confluentinc}/cp-kafka:${CONFLUENT_TAG:-5.4.1}
  #   hostname: broker
  #   container_name: broker
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - "29092:29092"
  #     - "9092:9092"
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

  # schema-registry:
  #   image: ${CONFLUENT_REPOSITORY:-confluentinc}/cp-schema-registry:${CONFLUENT_TAG:-5.4.1}
  #   hostname: schema-registry
  #   container_name: schema-registry
  #   depends_on:
  #     - zookeeper
  #     - broker
  #   ports:
  #     - "8081:8081"
  #   environment:
  #     SCHEMA_REGISTRY_HOST_NAME: schema-registry
  #     SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'

  # connect:
  #   image: cnfldemos/kafka-connect-datagen:0.2.0-5.4.0
  #   hostname: connect
  #   container_name: connect
  #   depends_on:
  #     - zookeeper
  #     - broker
  #     - schema-registry
  #   ports:
  #     - "8083:8083"
  #   environment:
  #     CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
  #     CONNECT_REST_ADVERTISED_HOST_NAME: connect
  #     CONNECT_REST_PORT: 8083
  #     CONNECT_GROUP_ID: compose-connect-group
  #     CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
  #     CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
  #     CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
  #     CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
  #     CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
  #     CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
  #     CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
  #     CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
  #     CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
  #     CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
  #     CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
  #     CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
  #     CONNECT_ZOOKEEPER_CONNECT: 'zookeeper:2181'
  #     CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
  #     CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR

  # ksql-server:
  #   image: ${CONFLUENT_REPOSITORY:-confluentinc}/cp-ksql-server:${CONFLUENT_TAG:-5.4.1}
  #   hostname: ksql-server
  #   container_name: ksql-server
  #   depends_on:
  #     - broker
  #     - connect
  #   ports:
  #     - "8088:8088"
  #   environment:
  #     KSQL_CONFIG_DIR: "/etc/ksql"
  #     KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksql/log4j-rolling.properties"
  #     KSQL_BOOTSTRAP_SERVERS: "broker:29092"
  #     KSQL_HOST_NAME: ksql-server
  #     KSQL_LISTENERS: "http://0.0.0.0:8088"
  #     KSQL_CACHE_MAX_BYTES_BUFFERING: 0
  #     KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
  #     KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
  #     KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
  #     KSQL_KSQL_CONNECT_URL: "http://connect:8083"

  # ksql-cli:
  #   image: ${CONFLUENT_REPOSITORY:-confluentinc}/cp-ksql-cli:${CONFLUENT_TAG:-5.4.1}
  #   container_name: ksql-cli
  #   depends_on:
  #     - broker
  #     - connect
  #     - ksql-server
  #   entrypoint: /bin/sh
  #   tty: true

  # ksql-datagen:
  #   # Downrev ksql-examples to 5.1.2 due to DEVX-798 (work around issues in 5.2.0)
  #   image: ${CONFLUENT_REPOSITORY:-confluentinc}/ksql-examples:${CONFLUENT_TAG:-5.4.1}
  #   hostname: ksql-datagen
  #   container_name: ksql-datagen
  #   depends_on:
  #     - ksql-server
  #     - broker
  #     - schema-registry
  #     - connect
  #   command: "bash -c 'echo Waiting for Kafka to be ready... && \
  #                      cub kafka-ready -b broker:29092 1 40 && \
  #                      echo Waiting for Confluent Schema Registry to be ready... && \
  #                      cub sr-ready schema-registry 8081 40 && \
  #                      echo Waiting a few seconds for topic creation to finish... && \
  #                      sleep 11 && \
  #                      tail -f /dev/null'"
  #   environment:
  #     KSQL_CONFIG_DIR: "/etc/ksql"
  #     KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksql/log4j-rolling.properties"
  #     STREAMS_BOOTSTRAP_SERVERS: broker:29092
  #     STREAMS_SCHEMA_REGISTRY_HOST: schema-registry
  #     STREAMS_SCHEMA_REGISTRY_PORT: 8081

  # rest-proxy:
  #   image: ${CONFLUENT_REPOSITORY:-confluentinc}/cp-kafka-rest:${CONFLUENT_TAG:-5.4.1}
  #   depends_on:
  #     - zookeeper
  #     - broker
  #     - schema-registry
  #   ports:
  #     - 8082:8082
  #   hostname: rest-proxy
  #   container_name: rest-proxy
  #   environment:
  #     KAFKA_REST_HOST_NAME: rest-proxy
  #     KAFKA_REST_BOOTSTRAP_SERVERS: 'broker:29092'
  #     KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
  #     KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'

  ## Service Discovery
  # common-consul:
  #   image: consul:1.6.3
  #   container_name: common-consul
  #   restart: always
  #   network_mode: host
  #   environment:
  #     CONSUL_BIND_INTERFACE: docker0
  #   ports:
  #     - 8400:8400
  #     - 8500:8500
  #     - 8600:8600
  #     - 8600:8600/udp
  #   command: "agent -server -bootstrap-expect 1 -ui -client 0.0.0.0"

#   common-consul:
#     image: consul:1.6.3
#     container_name: common-consul
#     restart: always
#     ports:
#       - 8300:8300
#       - 8400:8400
#       - 8500:8500
#       - 8600:8600
#       - 8600:8600/udp
#     volumes:
#         - ./config:/config
#         - ./storage/consul:/data
#     command: agent -server -data-dir=/data -bind 0.0.0.0 -client 0.0.0.0 -bootstrap-expect=1

#   common-vault:
#     image: vault
#     container_name: common-vault
#     # cap_add:
#     #     - IPC_LOCK
#     command: server -config=/config/vault.hcl
#     ports:
#         - 8200:8200
#     depends_on:
#         - common-consul

#   common-vault-ui:
#     image: djenriquez/vault-ui
#     container_name: common-vault-ui
#     ports:
#         - 8000:8000
#     environment:
#         NODE_TLS_REJECT_UNAUTHORIZED: 0
#         VAULT_URL_DEFAULT: https://common-vault:8200

#   backup:
#     container_name: backup
#     build: backup/
#     volumes:
#         - ./storage/backup:/backup/
#     command: consul-backup

# volumes:
#   common-consul

volumes:
  common_mongo_data:
    driver: local
  common_mongo_config:
    driver: local
  # mongodb_master_data:
  #   driver: local
  common_mysql_master_data:
    driver: local
#   influxdb-storage:
#   grafana-storage:
